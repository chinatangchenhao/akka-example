1.什么是Akka?
----------------
Akka是一款高性能，高容错性的分布式和并行应用框架，底层通过JVM上另外一个流行的语言Scala实现，基于经典的Actor并发模型的一个工具集。

2.特点
----------------
1.并行与并发
  提供对并行和并发的高度抽象
2.异步费阻塞
  Akka-Actor消息通信都是基于异步非阻塞
3.高容错性
4.持久化
  Actor携带的状态或消息可以被持久化，以便于在JVM崩溃后能恢复状态
5.轻量级
  每个Actor大约只占300byte，1G内存可容纳接近300W个Actor

3.场景
----------------
服务后端：比如rest web，websocket服务，分布式消息处理等。
并发和并行：比如日志异步处理，秘籍数据计算等

Akka的架构体系以及周边生态
ppt图1-4

1.Actor是什么鬼？
  1.1 Actor模型
      (1)Akka最基本的执行单元
	  (2)在分布式框架中是并行计算的最小单元(实例)，拥有自己状态和行为
	  (3)Actor之间的通信以消息为载体，提供"问答"式API
	  (4)异步 --> 图1-3
      (5)线程安全，Actor运行在线程之上，从底层屏蔽了线程和锁的管理，对于开发者不用考虑安全性问题。
	  (6)轻量级
  1.2 ActorSystem
      在一个应用中，所有的Actor共同构成了Actor系统，即ActorSystem。一个应用中只能有一个ActorSystem
	  ActorSystem是一个层级结构，如图2-1

	  如果构建父子关系？Actor被谁创建，谁就是父级
	  ```
	  ActorSystem创建会默认启动三个顶级的Actor
	  我们应用程序里面创建的Actor只是一部分
	  ```

	  /是整个ActorSystem的根
	  /user分支是我们在应用程序中通过ActorSystem.actorOf()方法创建的，这个也是我们能手动创建的最高级别的Actor
	  /system分支都是系统层面Actor(开发者无需关心)

  1.3 Actor生命周期
      图2-10

	  创建并启动(Start)
	      actorOf()方法创建，启动后会默认调用preStart方法(可以做一系列资源的初始化)
	  恢复(Resume)
	      当出现异常，通过容错机制让Actor恢复并继续运行，延用之前的实例，状态也会保留下来。
	  重启(Restart)
	      当出现异常，通过容错机制让Actor执行重启
		  调用旧实例的preRestart方法，默认停止所有子级Actor
		  创建新实例，调用新实例的postRestart方法
	  停止(Stop)
	      停止会调用postStop方法，同时会发送一条Terminated信息给自己的监控者，告知自己已经终结

   1.4 引用和路径
        Actor可能存在于本地或者远程，对开发者来说没有明显区分，仅仅需要操作应用即可
		Actor的引用是ActorRef，它就是Actor的一种代理

		图2-2

		Actor创建之后会有自己路径：
		akka://mysys/user/parentActor/childActor
		akka:tcp://mysys@127.0.0.1:2554/user/parentActor/childActor
		通过这个路径可以方便的定位一个Actor


2 Actor编程
  1.定义Actor
        继承UntypedActor
  2.创建Actor示例
       注意：禁止new对象,Actor作为核心执行的单元，具有并行运行和分布式的特点，为了屏蔽实现细节，简化调用方式，统一资源调配和层级管理，需要通过Akka提供的API来创建Actor
  3.发送接受消息
        tell
		ask
  4.查找Actor
  5.停止Actor

3.MailBox
4.Router
5.Akka Stream
6.Akka HTTP
  请求/响应
  HTTP客户端
  Routing DSL
  Directive